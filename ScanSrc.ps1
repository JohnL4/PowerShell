<#	.SYNOPSIS		Scans source code files for regular expressions, producing a list of files with hits.			.DESCRIPTION		Scans starting in current directory, finding files which contain any of the given		regular expressions.			.PARAMETER RegularExpressions		Comma-separated list of regular expressions.			.PARAMETER ShowScannedFileTypes		Dumps out the types of files that are scanned.	.INPUTS		None.			.OUTPUTS		List of System.IO.FileInfo objects, containing one of the given regular expressions.				Consider using "| % { $_.FullName }" to print the full path of each matched file.#>function ScanSrc( [String[]] $RegularExpressions, 				  [switch] $ShowScannedFileTypes){	$myName = $MyInvocation.MyCommand.Name	$fileTypes = "*.vb","*.sql","*.frm","*.cls","*.bas","*.asp","*.aspx","*.ascx","*.xml",		"*.txt","*.cs","*.htm","*.html","*.sln","*.vbproj","*.vbp","*.vbg","*.csproj",		"*.wsdl","*.css","*.vbs","*.bat","*.ps1","*.java","*.asa","*.asax","*.cmd",		"*.patch","*.diff","*.asmx","*.svc","*.org","*.config"	if ($ShowScannedFileTypes)	{		echo ("${myName}: Scanned filetypes are:`n`t" + ($($fileTypes | sort) -join "`n`t"))	}			if ($RegularExpressions.Length -gt 0)	{		ls -rec -include $fileTypes `			| select-string -list $RegularExpressions `			| % { New-Object System.IO.FileInfo $_.Path }	}}
